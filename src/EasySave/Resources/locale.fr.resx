<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ClearConsole" xml:space="preserve">
    <value>"clear" ("cls"): Effacer les lignes précédentes</value>
  </data>
  <data name="CommandParseException" xml:space="preserve">
    <value>Le format de la commande est incorrect</value>
  </data>
  <data name="CreateSave" xml:space="preserve">
    <value>"add": Permet de créer un travail de sauvegarde. Elle doit contenir les arguments suivants :
   -name / n  : Nom du travail de sauvegarde
   -inputFolder / i : Chemin absolue du répèrtoire source du travil de la sauvegarde   
   -outputFolder / o : Chemin absolue du répèrtoire cible du travil de la sauvegarde 
   -saveType / T : Type de travil de la sauvegarde, soit complète (complete) soit différentielle (differential)</value>
  </data>
  <data name="Exit" xml:space="preserve">
    <value>"exit": Quitter l'application</value>
  </data>
  <data name="HelloWorld" xml:space="preserve">
    <value>Bonjour, Monde!</value>
  </data>
  <data name="Help" xml:space="preserve">
    <value>"help" ("h"): Permet d'obtenir la liste des commandes disponibles ainsi qu'une explication sur ces dernières.</value>
  </data>
  <data name="Langage" xml:space="preserve">
    <value>Passage en mode français !</value>
  </data>
  <data name="Language" xml:space="preserve">
    <value>Il est possible de rajouter le paramètre "lang" aux commandes afin de changer la langue (actuellement "fr" et "en" sont supportés)</value>
  </data>
  <data name="LaunchSave" xml:space="preserve">
    <value>"run" ("r"): Permet de lancer un travail de sauvegarde existant. Un id de sauvegarde ou une liste d'id est attendu en paramètre. Si le paramètre all est renseigné, toutes les sauvegardes seront lancées.
   -id : Id des sauvegardes à lancer.
Exemple :
   - run -id "1-3" : Lance la sauvegarde 1 à 3
   - r -id "1-3" : Lance la sauvegarde 1 à 3
   - run -id "1;3" : Lance la sauvegarde 1 et 3
   - run -id "1-3;5;7-9" : Lance les sauvegardes 1 à 3, 5 et 7 à 9
   - r -all : Lance toutes les sauvegardes</value>
  </data>
  <data name="ListSave" xml:space="preserve">
    <value>"list" ("ls"): Permet d'afficher les travaux de sauvegarde configurés ainsi que leur id.</value>
  </data>
  <data name="MissingParameter" xml:space="preserve">
    <value>Parametre manquant</value>
  </data>
  <data name="RemoveSave" xml:space="preserve">
    <value>"delete": Permet de supprimer un travail de sauvegarde existant. Un id de sauvegarde ou une liste d'id est attendu en paramètre.
   -id : Id des sauvegardes à lancer.
Exemple :
   - delete -id "1-3" : Supprime les sauvegarde 1 à 3
   - delete -id "1;3" : Supprime les sauvegarde 1 et 3
   - delete -id "1-3;5;7-9" : Supprime les sauvegardes 1 à 3, 5 et 7 à 9</value>
  </data>
  <data name="UnrecognizedCommand" xml:space="preserve">
    <value>La commande n'est pas reconnue. "help" / "h" pour afficher la liste des commandes disponible</value>
  </data>
  <data name="UpdateSave" xml:space="preserve">
    <value>"update": Permet de modifier un travail de sauvegarde existant. L'id du travail à modifier est obligatoire, les autres paramètres sont optionnels selon les champs que l'on souhaite mettre à jour:
   -name / n  : Nom du travail de sauvegarde
   -inputFolder / i : Chemin absolue du répèrtoire source du travil de la sauvegarde   
   -outputFolder / o : Chemin absolue du répèrtoire cible du travil de la sauvegarde 
   -saveType / T : Type de travil de la sauvegarde, soit complète (complete) soit différentielle (differential)</value>
  </data>
</root>