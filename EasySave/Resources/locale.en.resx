<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ClearConsole" xml:space="preserve">
    <value>"clear" ("cls"): Clear previous lines</value>
  </data>
  <data name="CommandParseException" xml:space="preserve">
    <value>Incorrect command format</value>
  </data>
  <data name="CreateSave" xml:space="preserve">
    <value>"add": Used to create a backup job. It must contain the following arguments:
   -name / n : Followed by the name in quotation marks, used to name the backup job.
   -inputFolder / i : The absolute path of the backup job's source directory.   
   -outputFolder / o: The absolute path of the backup job's target directory. 
   -saveType / t : Tracks the type of backup job, either complete ("complete") or differential ("differential")</value>
  </data>
  <data name="HelloWorld" xml:space="preserve">
    <value>Hello, World!</value>
  </data>
  <data name="Help" xml:space="preserve">
    <value>"help" ("h"): Provides a list of available commands and an explanation of them.</value>
  </data>
  <data name="Langage" xml:space="preserve">
    <value>Switch to English mode!</value>
  </data>
  <data name="Language" xml:space="preserve">
    <value>You can add the "lang" parameter to any command to change the language (currently "fr" and "en" are supported).</value>
  </data>
  <data name="LaunchSave" xml:space="preserve">
    <value>"run" ("r"): Used to run an existing backup job. A backup id or a list of ids is expected as a parameter. If the all parameter is set, all backups will be run.
   -id: Id of backups to be launched.
Example:
   - run -id "1-3" : Launches backups 1 to 3
   - r -id "1-3" : Launches backup 1 to 3
   - run -id "1;3" : Launches backup 1 and 3
   - run -id "1-3;5;7-9": Launches backups 1 to 3, 5 and 7 to 9
   - r -all : Launches all backups</value>
  </data>
  <data name="ListSave" xml:space="preserve">
    <value>"list" ("ls"): Displays configured backup jobs and their id.</value>
  </data>
  <data name="MissingParameter" xml:space="preserve">
    <value>Missing parameter</value>
  </data>
  <data name="RemoveSave" xml:space="preserve">
    <value>"delete": Used to delete an existing backup job. A backup id or a list of ids is expected as a parameter.
   -id: Id of backups to be launched.
Example :
   - delete -id "1-3": Deletes backups 1 to 3
   - delete -id "1;3" : Deletes backups 1 and 3
   - delete -id "1-3;5;7-9": Deletes backups 1 to 3, 5 and 7 to 9</value>
  </data>
  <data name="UnrecognizedCommand" xml:space="preserve">
    <value>The command is not recognized. "help" / "h" to display the list of available commands</value>
  </data>
  <data name="UpdateSave" xml:space="preserve">
    <value>"update": Used to modify an existing backup job. The id of the job to be modified is mandatory; other parameters are optional, depending on the fields you wish to update:
   -name / n : Name of backup job
   -inputFolder / i : Absolute path of the backup job source directory   
   -outputFolder / o : Absolute path of the backup job's target directory 
   -saveType / T: Type of backup job, either complete or differential.</value>
  </data>
</root>